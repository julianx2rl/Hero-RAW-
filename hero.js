var doomcounter = 0;

var knowledge = [];

var turnohecho = true;

var temporary = ""; // Conocimiento temporal.

var _messageChannels = [0, 1, 2, 3, 4, 5, 6, 7];

function KnowledgeEntry(id, time) {
    this.id = id;
    this.duration = time;
	return this;
}

async function startProgram() {
	playMatrixAnimation(0, true);
	while(true){
		listenForIRMessage(_messageChannels); // Una vez termina el comportamiento detonado por el mensaje vuelve a escuchar por mensajes
	}
}



async function onIRMessageX(channel) {
	if(_messageChannels.includes(channel))
	{
		if(channel == 7){
			var turnohecho = false; // Se ejecuto el tick
		} else {
			switch(channel) {
  				case 0: // Ataque Monstruo Ligero (Sphero no sabe eso al inicio)
  				case 1: // Ataque Monstruo Medio
				case 2: // Ataque Monstruo Pesado
					// Respuesta al ataque
					// Agregar conocimiento - knowledge.push(KnowledgeEntry(1,1));
					var entry = false;
					
					for (var i = 0; i < knowledge.length; i++) {
						if (knowledge[i] == channel) {
							entry = knowledge[i];
							break;
  						}
					}
					
					if(entry != false){ // Si tiene conocimiento.
						doomcounter = entry.duration;
					}
					
					playMatrixAnimation(0, true);
				break;
				case 3:
					if(knowledge[0].id = 1){
						playMatrixAnimation(2, true);
					}else{
						playMatrixAnimation(1, true);
					}
				break;
  				default:
    				playMatrixAnimation(0, true);
			}
		}
	}
}
registerEvent(EventType.onIRMessage, onIRMessageX);

registerMatrixAnimation({
	frames: [[[1, 1, 4, 4, 4, 4, 1, 1], [1, 4, 4, 4, 4, 4, 4, 1], [1, 4, 4, 1, 1, 4, 4, 1], [1, 1, 1, 1, 1, 4, 4, 1], [1, 1, 1, 1, 4, 4, 1, 1], [1, 1, 1, 4, 4, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 4, 4, 1, 1, 1]], [[6, 6, 2, 2, 2, 2, 6, 6], [6, 2, 2, 2, 2, 2, 2, 6], [6, 2, 2, 6, 6, 2, 2, 6], [6, 6, 6, 6, 6, 2, 2, 6], [6, 6, 6, 6, 2, 2, 6, 6], [6, 6, 6, 2, 2, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 2, 2, 6, 6, 6]], [[14, 14, 13, 13, 13, 13, 14, 14], [14, 13, 13, 13, 13, 13, 13, 14], [14, 13, 13, 14, 14, 13, 13, 14], [14, 14, 14, 14, 14, 13, 13, 14], [14, 14, 14, 14, 13, 13, 14, 14], [14, 14, 14, 13, 13, 14, 14, 14], [14, 14, 14, 14, 14, 14, 14, 14], [14, 14, 14, 13, 13, 14, 14, 14]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 120, g: 2, b: 1 }, { r: 105, g: 107, b: 2 }, { r: 204, g: 27, b: 126 }],
	fps: 10,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1]], [[2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1]], [[1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 3, 1, 1, 3, 1, 1], [1, 2, 2, 3, 3, 2, 2, 1], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1]], [[2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1]], [[1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 3, 1, 1, 3, 1, 1], [1, 2, 2, 3, 3, 2, 2, 1], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 46, g: 1, b: 1 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 255, g: 0, b: 255 }, { r: 204, g: 27, b: 126 }],
	fps: 24,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[0, 1, 0, 0, 0, 0, 1, 0], [0, 2, 2, 1, 1, 2, 2, 0], [1, 2, 2, 2, 2, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2], [2, 1, 1, 2, 2, 1, 1, 2], [0, 2, 1, 2, 2, 1, 2, 0], [0, 2, 2, 2, 2, 2, 2, 0], [0, 0, 0, 1, 1, 0, 0, 0]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 255, g: 0, b: 255 }, { r: 204, g: 27, b: 126 }],
	fps: 10,
	transition: MatrixAnimationTransition.None
});
